* Fresnel Equation for reflection

* Set function to use per pixel including default for constructor which can be
given one to start with
* Needs to be given the window dimensions to be create the 3D array
* Needs the scene to shoot rays into. Scene must have:
object info
camera info
* Spawns threads to determine some particular pixel then collects and sets
thread returned info to the 3D array
* Setup the OpenGL code for:
create 2 triangles that cover screne
create a texture from 3D array
pass texture to OpenGL
compile and use the simple necessary shader code
might want to create a shader object to use here
* render function:
The manager basically.. at this time in the scene what does it lool like and
display that to the GLUT window. then in the future the GLFW window I am
given.

* Editing the code for the tracing function would be the marching and color
determination part. This is what is CUDA cored or cpu pthreaded. First thing
is get this with ray marching then to take small incrememted steps for black
hole.
* also pencile line drawing cause each pixel can be set
* B-spline for camera movement

Rehy (Ray) light scattering where if something is running on a VR headset we should
be able to mimic how light travels through an eye before hitting the image plane
Nieve method would be going through a sphere and initially having refraction and other
rays and if you are really into it should be able to easily model some eye disease issues
which skew vison. This should give depth of field if we tweek the initial eye sphere.

